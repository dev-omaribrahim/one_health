name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: django_db
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_HOST_AUTH_METHOD: trust
        # options: >-
        #   --health-cmd "pg_isready -U django_user -d django_db"
        #   --health-interval 10s
        #   --health-timeout 5s
        #   --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DB_NAME=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; do
            echo "Waiting for Postgres to be ready..."
            sleep 5
          done

      - name: Run tests
        env:
          DB_NAME: ${{ secrets.POSTGRES_DB }}
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          python manage.py test

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SECRETSSHEC2 }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH key to the agent
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Set up known_hosts
        run: |
          ssh-keyscan -H ${SERVER_IP} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${SERVER_IP} << 'EOF'
            cd /home/ec2-user/project/one_health
            git pull origin main
            docker-compose down -v
            docker-compose up --build -d
          EOF
